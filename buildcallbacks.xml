<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
-->
<project name="kotlinnature_buildcallbacks">

    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${ext.kotlinnature.path}/lib/kotlin-ant.jar"/>

    <target name="kotlinnature_compile_mode">
        <kotlinnature_compile_mode mode="${mode}"/>
    </target>

    <macrodef name="kotlinnature_compile_mode">
        <attribute name="mode" default=""/>
        <sequential>
            <kotlinnature_before_build/>

            <switch value="@{mode}">
                <case value="after_ext_compile">
                    <kotlinnature_compile_mode_compiler_adapter_disable/>
                    <kotlinnature_compile_mode_after_ext_compile_enable/>

                    <replaceregexp file="${ext.kotlinnature.path}/project.properties"
                                   match="kotlinnature\.compiler\.mode=(.*)"
                                   replace="kotlinnature\.compiler\.mode=after_ext_compile"
                                   byline="true"/>
                    <echo>---------------------------------------------------------------------
Kotlinnature extension has been switched to `after_ext_compile` mode
In this mode only Kotlin classes will have visibility to Java classes
---------------------------------------------------------------------
</echo>
                </case>
                <case value="compiler_adapter">
                    <kotlinnature_compile_mode_after_ext_compile_disable/>
                    <kotlinnature_compile_mode_compiler_adapter_enable/>

                    <replaceregexp file="${ext.kotlinnature.path}/project.properties"
                                   match="kotlinnature\.compiler\.mode=(.*)"
                                   replace="kotlinnature\.compiler\.mode=compiler_adapter"
                                   byline="true"/>
                    <echo>-------------------------------------------------------------------------------
      Kotlinnature extension has been switched to `compiler_adapter` mode
In this mode Kotlin classes will have visibility to Java classes and vice-versa
-------------------------------------------------------------------------------
                    </echo>
                </case>
                <case value="uninstall">
                    <kotlinnature_compile_mode_after_ext_compile_disable/>
                    <kotlinnature_compile_mode_compiler_adapter_disable/>

                    <replaceregexp file="${ext.kotlinnature.path}/project.properties"
                                   match="kotlinnature\.compiler\.mode=(.*)"
                                   replace="kotlinnature\.compiler\.mode="
                                   byline="true"/>
                    <echo>------------------------------------------------------------
     Kotlinnature extension has been uninstalled.
 All modifications to OOTB SAP Commerce files were reverted.
------------------------------------------------------------
|      Thank you for using `kotlinnature` extension.       |
------------------------------------------------------------
                    </echo>
                </case>
                <default>
                    <fail>
                        Provided mode @{mode} is unsupported. Allowed modes are: `after_ext_compile`, `compiler_adapter`
                        Example: ant kotlinnature_compile_mode -Dmode=after_ext_compile
                    </fail>
                </default>
            </switch>
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_mode_after_ext_compile_enable">
        <sequential>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<extension_compile_web extname="@{extname}" />]]></replacetoken>
                <replacevalue><![CDATA[<extension_compile_web extname="@{extname}"/>
            <kotlinnature_compile_web extname="@{extname}"/>]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<extension_compile_core extname="@{extname}" />]]></replacetoken>
                <replacevalue><![CDATA[<extension_compile_core extname="@{extname}"/>
            <kotlinnature_compile_core extname="@{extname}"/>]]></replacevalue>
            </replace>
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_mode_after_ext_compile_disable">
        <sequential>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<extension_compile_web extname="@{extname}"/>
            <kotlinnature_compile_web extname="@{extname}"/>]]></replacetoken>
                <replacevalue><![CDATA[<extension_compile_web extname="@{extname}" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<extension_compile_core extname="@{extname}"/>
            <kotlinnature_compile_core extname="@{extname}"/>]]></replacetoken>
                <replacevalue><![CDATA[<extension_compile_core extname="@{extname}" />]]></replacevalue>
            </replace>
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_mode_compiler_adapter_enable">
        <sequential>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/antmacros.xml">
                <replacetoken><![CDATA[<taskdef name="yjavac" classname="de.hybris.ant.taskdefs.YJavaC">]]></replacetoken>
                <replacevalue><![CDATA[<taskdef name="yjavac" classname="org.apache.tools.ant.taskdefs.Javac">]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="src" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="src"/><include name="kotlinsrc"/>]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="testsrc" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="testsrc"/><include name="kotlintestsrc"/>]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="src/**/*.java" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="src/**/*.java"/><include name="kotlinsrc/**/*.kt" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="testsrc/**" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="testsrc/**"/><include name="kotlintestsrc/**" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/util.xml">
                <replacetoken><![CDATA[<compilerarg line="${standalone.jdkmodulesexports}"/>]]></replacetoken>
                <replacevalue><![CDATA[<withKotlin/><compilerarg line="${standalone.jdkmodulesexports}" />]]></replacevalue>
            </replace>
            <replaceregexp file="${ext.kotlinnature.path}/project.properties"
                           match="^#build\.compiler=modern$"
                           replace="build\.compiler=modern"
                           byline="true"/>
<!--            <replace file="${ext.kotlinnature.path}/project.properties">-->
<!--                <replacetoken><![CDATA[#build.compiler=modern]]></replacetoken>-->
<!--                <replacevalue><![CDATA[build.compiler=modern]]></replacevalue>-->
<!--            </replace>-->
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_mode_compiler_adapter_disable">
        <sequential>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/antmacros.xml">
                <replacetoken><![CDATA[<taskdef name="yjavac" classname="org.apache.tools.ant.taskdefs.Javac">]]></replacetoken>
                <replacevalue><![CDATA[<taskdef name="yjavac" classname="de.hybris.ant.taskdefs.YJavaC">]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="src"/><include name="kotlinsrc"/>]]></replacetoken>
                <replacevalue><![CDATA[<include name="src" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="testsrc"/><include name="kotlintestsrc"/>]]></replacetoken>
                <replacevalue><![CDATA[<include name="testsrc" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="src/**/*.java"/><include name="kotlinsrc/**/*.kt" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="src/**/*.java" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/compiling.xml">
                <replacetoken><![CDATA[<include name="testsrc/**"/><include name="kotlintestsrc/**/*.kt" />]]></replacetoken>
                <replacevalue><![CDATA[<include name="testsrc/**" />]]></replacevalue>
            </replace>
            <replace file="${HYBRIS_BIN_DIR}/platform/resources/ant/util.xml">
                <replacetoken><![CDATA[<withKotlin/><compilerarg line="${standalone.jdkmodulesexports}" />]]></replacetoken>
                <replacevalue><![CDATA[<compilerarg line="${standalone.jdkmodulesexports}"/>]]></replacevalue>
            </replace>
            <replaceregexp file="${ext.kotlinnature.path}/project.properties"
                           match="^build\.compiler=modern$"
                           replace="#build\.compiler=modern"
                           byline="true"/>
<!--            <replace file="${ext.kotlinnature.path}/project.properties">-->
<!--                <replacetoken><![CDATA[build.compiler=modern]]></replacetoken>-->
<!--                <replacevalue><![CDATA[#build.compiler=modern]]></replacevalue>-->
<!--            </replace>-->
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_before_build">
        <sequential>
            <mkdir dir="${ext.kotlinnature.path}/lib"/>

            <if>
                <not>
                    <available file="${ext.kotlinnature.path}/lib/kotlin-ant.jar"/>
                </not>
                <then>
                    <delete includeemptydirs="true" failonerror="false">
                        <fileset dir="${ext.kotlinnature.path}/lib" includes="**/*"/>
                    </delete>

                    <if>
                        <isset property="kotlinnature.compiler.version"/>
                        <then>
                            <property name="kotlinc.version" value="${kotlinnature.compiler.version}"/>
                        </then>
                        <else>
                            <property name="kotlinc.version" value="1.9.10"/>
                        </else>
                    </if>

                    <get src="https://github.com/JetBrains/kotlin/releases/download/v${kotlinc.version}/kotlin-compiler-${kotlinc.version}.zip"
                         dest="${ext.kotlinnature.path}/lib/kotlin-compiler.zip"/>

                    <unzip src="${ext.kotlinnature.path}/lib/kotlin-compiler.zip"
                           dest="${ext.kotlinnature.path}/lib/"
                           failOnEmptyArchive="true" overwrite="true">
                        <cutdirsmapper dirs="1"/>
                    </unzip>

                    <move todir="${ext.kotlinnature.path}/lib">
                        <fileset dir="${ext.kotlinnature.path}/lib/lib"/>
                    </move>

                    <delete includeemptydirs="true" failonerror="false">
                        <fileset dir="${ext.kotlinnature.path}/lib">
                            <include name="bin/**/*"/>
                            <include name="bin"/>
                            <include name="lib"/>
                            <include name="build.txt"/>
                            <!-- remove downloaded zip archive -->
                            <include name="allopen*.jar"/>
                            <include name="android*.jar"/>
                            <include name="assignment-compiler-plugin.jar"/>
                            <include name="js.engines.jar"/>
                            <include name="jvm-abi-gen.jar"/>
                            <include name="kotlin-annotation*.jar"/>
                            <include name="kotlin-daemon.jar"/>
                            <include name="kotlin-daemon-client.jar"/>
                            <include name="kotlin-imports-dumper-compiler-plugin.jar"/>
                            <include name="kotlin-main-kts.jar"/>
                            <include name="kotlin-runner.jar"/>
                            <include name="kotlin-test-js*.jar"/>
                            <include name="sam-with-receiver-compiler-plugin.jar"/>
                            <include name="parcelize-*.jar"/>
                            <include name="noarg-compiler-plugin.jar"/>
                            <include name="mutability-annotations-compat.jar"/>
                            <include name="lombok-compiler-plugin.jar"/>
                            <include name="kotlin-test-junit5.jar"/>
                            <include name="kotlin-test-testng.jar"/>
                            <include name="*-sources.jar"/>
                            <!-- remove downloaded zip archive -->
                            <include name="kotlin-compiler.zip"/>
                            <!-- do not remove license -->
                            <!-- <include name="license/**/*"/>-->
                            <!-- <include name="license"/>-->
                        </fileset>
                    </delete>

                    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${ext.kotlinnature.path}/lib/kotlin-ant.jar"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="_before_build">
        <sequential>
            <if>
                <equals arg1="${kotlinnature.compiler.mode}" arg2=""/>
                <then>
                    <kotlinnature_compile_mode mode="compiler_adapter"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="kotlin_compile">
        <element name="additionalclasspath" optional="true"/>
        <attribute name="memoryMaximumSize" default="64m"/>
        <attribute name="destdir"/>
        <attribute name="srcdir"/>
        <attribute name="extname"/>
        <sequential>
            <if>
                <available file="@{srcdir}" type="dir"/>
                <then>
                    <if>
                        <isset property="@{extname}.kotlinc.fork"/>
                        <then>
                            <property name="@{extname}.fork" value="${@{extname}.kotlinc.fork}"/>
                        </then>
                        <elseif>
                            <isset property="kotlinc.fork"/>
                            <then>
                                <property name="@{extname}.fork" value="${kotlinc.fork}"/>
                            </then>
                        </elseif>
                        <else>
                            <property name="@{extname}.fork" value="true"/>
                        </else>
                    </if>
                    <mkdir dir="@{destdir}"/>

                    <taskdef name="kotlinc" classname="org.jetbrains.kotlin.ant.Kotlin2JvmTask">
                        <classpath>
                            <fileset dir="${ext.kotlinnature.path}/lib">
                                <include name="*.jar"/>
                            </fileset>
                        </classpath>
                    </taskdef>

                    <kotlinc moduleName="@{extname}" src="@{srcdir}" fork="${@{extname}.fork}" output="@{destdir}"
                             verbose="${build.verbose}" failOnError="true">
                        <classpath>
                            <additionalclasspath/>
                            <fileset dir="${ext.@{extname}.path}">
                                <include name="${ext.@{extname}.additional.src.dir}/**/*.class"/>
                                <include name="${ext.@{extname}.additional.testsrc.dir}/**/*.class"/>
                                <include name="${ext.@{extname}.additional.websrc.dir}/**/*.class"/>
                                <include name="${ext.@{extname}.additional.webtestsrc.dir}/**/*.class"/>
                            </fileset>
                            <pathelement path="${build.classpath}"/>
                            <pathelement path="${HYBRIS_BOOTSTRAP_BIN_DIR}/models.jar"/>
                            <fileset dir="${bundled.tomcat.home}">
                                <include name="lib/*.jar"/>
                            </fileset>
                            <pathelement path="${HYBRIS_TEMP_DIR}/log4j"/>
                            <pathelement path="${ext.@{extname}.classpath}"/>
                            <!-- for the log4j stuff -->
                        </classpath>
                    </kotlinc>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_core">
        <attribute name="extname"/>
        <sequential>
            <if>
                <isset property="ext.@{extname}.coremodule.available"/>
                <then>
                    <if>
                        <istrue value="${ext.@{extname}.extension.coremodule.sourceavailable}"/>
                        <then>
                            <kotlin_compile srcdir="${ext.@{extname}.path}/kotlinsrc"
                                            destdir="${ext.@{extname}.path}/classes"
                                            extname="@{extname}"/>
                            <kotlin_compile srcdir="${ext.@{extname}.path}/kotlintestsrc"
                                            destdir="${ext.@{extname}.path}/classes"
                                            extname="@{extname}"/>
                        </then>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="kotlinnature_compile_web">
        <attribute name="extname"/>
        <sequential>
            <if>
                <isset property="ext.@{extname}.webmodule.available"/>
                <then>
                    <if>
                        <istrue value="${ext.@{extname}.extension.webmodule.sourceavailable}"/>
                        <then>
                            <kotlin_compile srcdir="${ext.@{extname}.path}/web/kotlinsrc"
                                            destdir="${ext.@{extname}.path}/web/webroot/WEB-INF/classes"
                                            extname="@{extname}"/>
                            <kotlin_compile srcdir="${ext.@{extname}.path}/web/kotlintestsrc"
                                            destdir="${ext.@{extname}.path}/web/webroot/WEB-INF/classes"
                                            extname="@{extname}"/>
                        </then>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>

</project>
